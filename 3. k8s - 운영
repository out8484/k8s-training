===== git 이용한 배포 (공식 repo 의 경우 daum 이 사용하는 것을 사용하던지, harbor 사용하던지 하면 됨)
git 이용
	repo 신규로 생성하고, url 을 기록
		https://github.com/out8484/testdocker1.git


git 과 sync

[root@node3 docker]# yum install -y git

[root@node3 docker]# git --version
git version 1.8.3.1


[root@node3 docker]# git clone https://github.com/out8484/testdocker1.git
	git 에 만든 디렉토리가 local 에 생성 됨

[root@node3 docker]# ls
daemon.json  key.json  testdocker1

[root@node3 docker]# cd testdocker1/


[root@node3 testdocker1]# vi dockerfile
FROM busybox
RUN ls

[root@node3 testdocker1]# git add dockerfile 


[root@node3 testdocker1]# git commit -m "Add dockerfile"


git 로그인 후 token 생성
	- settings	- 개발자 설정	- ersonal access tokens	- Generate new token
	-name 지정	- repo 부분 체크	- generate token
		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


패스워드는 로그인 패스워드가 아니고 위와 같이 token key 만들고 copy n paste 해야 함

[root@node3 testdocker1]# git push origin master 
Username for 'https://github.com': out8484
Password for 'https://out8484@github.com': 
Counting objects: 3, done.
Writing objects: 100% (3/3), 233 bytes | 0 bytes/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To https://github.com/out8484/testdocker1.git
 * [new branch]      master -> master

	git 에 만든 repo 에 dockerfile 이 업로드 됨





===== guru 유저에게 k8s 접근 권한 주기
root로 로그인 하셔서 아래 명령어를 실행하시고 
mkdir -p ~guru/.kube
scp master:/etc/kubernetes/admin.conf ~guru/.kube/config
chown guru:guru ~guru/.kube/config





===== pod 상태 파악
schedular 는 etc, cAdvisor 등을 이용하여 POD 배포를 하게 되는데,
	만일, pending 발생시의 대처 방안은
		운영자가 work node 에 대한 정보를 넣어 주어야 함
			label 을 사용
		pod 배포 명령 후 pod 내부에서 1개 이상의 container 가 실행 준비가 안된 경우 -> pending
		schedular 에 의해 해당 정보는 API 에게 전달
		pending 이라 함음 schedular 입장에서 pending 일 뿐임, 실제적으로 운영측면에서는 error 임


pod 상태
	running	- pod가 node 에 바인딩 되어 있고, container 생성/정상 동작 상태
	succeed	- pod의 모든 container 들이 성공적으로 release 되었음을 의미
	failed	- pod의 모든 컨테이너가 종료 되었으나, 한개 이사의 container 가 실패로 종료
		ex: replicas 라는 서비스 여러개의 pod 를 런닝하는 그 중에 한개가 정
	imagepullbackoff	-이미지를 받아(pull) 올때 문제 발생
		https://kubernetes.io/ko/docs/concepts/containers/images/
		imagePullPolicy
			IfNotPresent
    				이미지가 로컬에 없는 경우에만 내려받는다.
			Always
    				kubelet이 컨테이너를 기동할 때마다, 컨테이너 이미지 레지스트리에 이름과 이미지의 다이제스트가 있는지 질의 
			Never
   				kubelet은 이미지를 가져오려고 시도하지 않는다. 
	unknow	- 이미지 자체가 깨져있을 겨우 





===== label

==리소스 특성을 분류, selector(yaml 이용 시)를 이용하여 선택
node 를 포함하여 pod, deployment 등 모든 리소스에 할당
key : value 방식


== kubectl get pod  --show-labels

[guru@master root]$ kubectl get pod  --show-labels
NAME       READY   STATUS    RESTARTS       AGE   LABELS
multipod   2/2     Running   6 (123m ago)   18h   <none>


== cli 로 pod 만들면, 자동으로 만들어 짐
	그렇지 않을 경우, yaml 등으로 만들면, label 생성 되지 않음

[guru@master root]$ k run redis --image=redis 
pod/redis created
	redis	- not sql DB

[guru@master root]$ k get pods
]NAME       READY   STATUS    RESTARTS       AGE
multipod   2/2     Running   6 (129m ago)   18h
redis      1/1     Running   0              24s

[guru@master root]$ k get pods --show-labels
NAME       READY   STATUS    RESTARTS       AGE    LABELS
multipod   2/2     Running   6 (130m ago)   18h    <none>
redis      1/1     Running   0              2m8s   run=redis

[root@master ~]# k run redis --image=redis --dry-run=client -o yaml > redis.yaml

[root@master ~]# more redis.yaml 
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: redis
  name: redis
spec:
  containers:
  - image: redis
    name: redis
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}

[root@master ~]# k get pod -L redis
NAME       READY   STATUS    RESTARTS       AGE   REDIS
multipod   2/2     Running   6 (142m ago)   19h   
redis      1/1     Running   0              13m   

[root@master ~]# k get pod --show-labels -L redis
NAME       READY   STATUS    RESTARTS       AGE   REDIS   LABELS
multipod   2/2     Running   6 (143m ago)   19h           <none>
redis      1/1     Running   0              14m           run=redis


== label 추가

[root@master ~]# k label pod redis app=db
pod/redis labeled

[root@master ~]# k get pod --show-labels
NAME       READY   STATUS    RESTARTS       AGE   LABELS
multipod   2/2     Running   6 (145m ago)   19h   <none>
redis      1/1     Running   0              16m   app=db,run=redis


== label 별 pod 검색	- k get pod --selector <label name>

[root@master ~]# k get pod --selector app=NO
No resources found in default namespace.

[root@master ~]# k get pod --selector app=db
NAME    READY   STATUS    RESTARTS   AGE
redis   1/1     Running   0          21m


== lable 지우는 방법

value : key 방식의 딕셔너리 이므로,
	value 를 지우는 것이지, key 를 지우는 것은 불가
		"app-" NOT"redis"
	알파벳은 지울 수 있으나, 단어는 지울수 없음

[root@master ~]# k describe pod redis
Name:         redis
Namespace:    default
Priority:     0
Node:         node3.example.com/10.100.0.103
Start Time:   Tue, 14 Dec 2021 21:52:07 -0500
Labels:       app=db
              run=redis

[root@master ~]# k get pods --show-labels
NAME       READY   STATUS    RESTARTS       AGE   LABELS
multipod   2/2     Running   6 (149m ago)   19h   <none>
redis      1/1     Running   0              21m   app=db,run=redis
test01     1/1     Running   0              21s   run=test01


[root@master ~]# k label pod redis app-
pod/redis unlabeled

[root@master ~]# k describe pod redis
Name:         redis
Namespace:    default
Priority:     0
Node:         node3.example.com/10.100.0.103
Start Time:   Tue, 14 Dec 2021 21:52:07 -0500
Labels:       run=redis


== node 특성에 맞는 label 지정 사용 사례
	
	AMD64, SSD 등으로 node 의 성격을 지정하고, 배포시 label 을 이용하여 알맞게 배포

[root@master ~]# k get nodes --show-labels
NAME                 STATUS   ROLES                  AGE   VERSION   LABELS
master.example.com   Ready    control-plane,master   25h   v1.23.0   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=master.example.com,kubernetes.io/os=linux,node-role.kubernetes.io/control-plane=,node-role.kubernetes.io/master=,node.kubernetes.io/exclude-from-external-load-balancers=
node1.example.com    Ready    <none>                 25h   v1.23.0   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=node1.example.com,kubernetes.io/os=linux
node2.example.com    Ready    <none>                 25h   v1.23.0   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=node2.example.com,kubernetes.io/os=linux
node3.example.com    Ready    <none>                 25h   v1.23.0   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=node3.example.com,kubernetes.io/os=linux

[root@master ~]# k get nodes -L amd64
NAME                 STATUS   ROLES                  AGE   VERSION   AMD64
master.example.com   Ready    control-plane,master   25h   v1.23.0   
node1.example.com    Ready    <none>                 25h   v1.23.0   
node2.example.com    Ready    <none>                 25h   v1.23.0   
node3.example.com    Ready    <none>                 25h   v1.23.0   

[root@master ~]# k get nodes -L ssd
NAME                 STATUS   ROLES                  AGE   VERSION   SSD
master.example.com   Ready    control-plane,master   25h   v1.23.0   
node1.example.com    Ready    <none>                 25h   v1.23.0   
node2.example.com    Ready    <none>                 25h   v1.23.0   
node3.example.com    Ready    <none>                 25h   v1.23.0   






===== init containter(초기 컨테이너)

== myapp-container pod 는 init-myservicㄷ, init-mydb 2개의 pod 가 실행되야 만 동작

[root@master ~]# more init.yaml 
apiVersion: v1
kind: Pod
metadata:
  name: myapp-pod
  labels:
    app: myapp
spec:
  containers:
  - name: myapp-container
    image: busybox:1.28
    command: ['sh', '-c', 'echo The app is running! && sleep 3600']
  initContainers:
  - name: init-myservice
    image: busybox:1.28
    command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.loca
l; do echo waiting for myservice; sleep 2; done"]
  - name: init-mydb
    image: busybox:1.28
    command: ['sh', '-c', "until nslookup mydb.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do
 echo waiting for mydb; sleep 2; done"]
<<-- until 커맨드 조건이 false 인 경우에만 반복
	어디까지? do 전까지 반복
	do 앞의 명령이 실패하면, myservice 안에서 제대로 동작 중이지 않으면 계속 반복


== init-myservice, init-mydb pod 가 동작하지 않으므로, STATUS = Init:0/2, 2개 모두 실행 X, READY = 0/1, myapp-pod 가 1개 동작해야 하는데 0 개 동작 중

[root@master ~]# kubectl get pods
NAME          READY   STATUS     RESTARTS         AGE
myapp-pod     0/1     Init:0/2   0                13s


== 우선, 아래 yaml 을 실행하여, init container 중 1개 실행,  Init:1/2 로 변경

[root@master ~]# more init01.yaml 
---
apiVersion: v1
kind: Service
metadata:
  name: myservice
spec:
  ports:
  - protocol: TCP
    port: 80
    targetPort: 9376

[root@master ~]# kubectl create -f init01.yaml 
service/myservice created

[root@master ~]# kubectl get pods
NAME          READY   STATUS     RESTARTS       AGE
myapp-pod     0/1     Init:1/2   0              4m53s

[root@master ~]# kubectl describe pod  myapp-pod
Name:         myapp-pod
Init Containers:
  init-myservice:
      ~~~~~
  init-mydb:
      ~~~~~
Containers:
  myapp-container:


== 아래 yaml 을 실행하여, init container 남은 1개 실행,  Init:1/2 -> Running 으로 변경

[root@master ~]# more init02.yaml 
---
apiVersion: v1
kind: Service
metadata:
  name: mydb
spec:
  ports:
  - protocol: TCP
    port: 80
    targetPort: 9377

[root@master ~]# kubectl create -f init02.yaml 
service/mydb created

[root@master ~]# kubectl get pods
NAME          READY   STATUS    RESTARTS       AGE
myapp-pod     1/1     Running   0              9m43s





===== 리소스 제한 (cpu, memory 등)
	https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/


== cpu request

[root@master ~]# more cpudemo.yaml 
apiVersion: v1
kind: Pod
metadata:
  name: cpu-demo
spec:
  containers:
  - name: cpu-demo-ctr
    image: vish/stress
    resources:
      requests:
        cpu: "0.5"

[root@master ~]# kubectl create -f cpudemo.yaml
pod/cpu-demo created

[root@master ~]# kubectl get pods
NAME          READY   STATUS    RESTARTS       AGE
cpu-demo      1/1     Running   0              15s

[root@master ~]# kubectl describe pod cpu-demo
Name:         cpu-demo
Namespace:    default
Priority:     0
Node:         node3.example.com/10.100.0.103
Start Time:   Wed, 15 Dec 2021 00:54:39 -0500
Labels:       <none>
Annotations:  <none>
Status:       Running
IP:           10.40.0.4
IPs:
  IP:  10.40.0.4
Containers:
  cpu-demo-ctr:
    ~~~~~
    Requests:
      cpu:        500m
<<-- cpu = 1 = 1000m, cpu = 4 = 4000m


== cpu limits

[root@master ~]# more cpudemo.yaml 
apiVersion: v1
kind: Pod
metadata:
  name: cpu-demo1
spec:
  containers:
  - name: cpu-demo-ctr1
    image: vish/stress
    resources:
      limits:
        cpu: "1"
      requests:
        cpu: "0.5"

[root@master ~]# kubectl create -f cpudemo.yaml 
pod/cpu-demo1 created

[root@master ~]# kubectl get pods
NAME          READY   STATUS    RESTARTS       AGE
cpu-demo1     1/1     Running   0              7s

[root@master ~]# kubectl describe pod cpu-demo1
~~~~~
    Restart Count:  0
    Limits:
      cpu:  1
    Requests:
      cpu:        500m
    Environment:  <none>


== cpu limits

[root@master ~]# more cpudemo.yaml 
apiVersion: v1
kind: Pod
metadata:
  name: cpu-demo2
spec:
  containers:
  - name: cpu-demo-ctr2
    image: vish/stress
    resources:
      limits:
        cpu: "1"
[root@master ~]# kubectl create -f cpudemo.yaml 
pod/cpu-demo2 created

[root@master ~]# kubectl get pods
NAME          READY   STATUS    RESTARTS       AGE
cpu-demo2     1/1     Running   0              9s

[root@master ~]# kubectl describe pod cpu-demo2
~~~~~
    Limits:
      cpu:  1
    Requests:
      cpu:        1


== memory
	https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/

메모리 용량 표현 방식
	1Mib = 1024Kib
	IEC standard
		1Kib = 1024b





===== POD 실행 패턴
Sidecar
	2개의 pod 가 같이 동작하는 패턴으로
	단독으로 동작하지 않는 pod 형태
		하나의 웹서버 컨테이너 로그를 만들고, 해당 로그를 저장하면서 다른 컨테이너는 이를 분석
		로그를 만들어 주어야 실행되는 컨테이너 pod 를 Sidecar 라고 함

Adapter
	외부에 있는 데이터를 내부로 가지고 와서 서비스 하는 형태
	
Ambassador
	웹서버 컨테이너에 고객이 접속하면, 데이터나 로그가 남게 됨
	이런 정보를 모아서 ambassador 를 통해 외부로 분산시켜 내보냄












































